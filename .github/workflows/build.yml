name: Rust Build with Maturin

on: [push, pull_request]

jobs:
  build-linux:
    name: Build Rust Project on Linux
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pyo3/maturin
    steps:
      - name: Clone Repository
        run: |
          git config --global --add safe.directory /__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}
          git clone https://github.com/${GITHUB_REPOSITORY}.git .
          git checkout ${GITHUB_SHA}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build with Maturin
        run: |
          yum update -y
          yum install -y openssl openssl-devel perl-IPC-Cmd perl-core
          rustup default stable
          maturin build --release --features py --out dist
 
      - name: Create Release
        run: |
          RELEASE_RESPONSE=$(curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases \
            -d "{\"tag_name\":\"${GITHUB_SHA}\",\"name\":\"Build ${GITHUB_SHA}\",\"draft\":false,\"prerelease\":false}")
          echo "RELEASE_ID=$(echo $RELEASE_RESPONSE | jq -r .id)" >> $GITHUB_ENV


      - name: Upload artifacts
        run: |
          cd dist
          for file in *; do
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Content-Type: $(file -b --mime-type $file)" \
              --data-binary @"$file" \
              "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${GITHUB_RUN_ID}/${RUNNER_ARCH}/assets?name=$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build-macos-arm:
    name: Build Rust Project on macOS Arm
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal

      - name: Install Maturin
        run: |
          python -m pip install maturin

      - name: Build with Maturin
        run: |
          maturin build --release --features py --out dist

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-arm
          path: dist/*

  build-linux-arm64:
    name: Build Rust Project on Linux arm64
    runs-on: ubuntu-24.04-arm
    container:
      image: ghcr.io/pyo3/maturin
    steps:
      - name: Clone Repository
        run: |
          git config --global --add safe.directory /__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}
          git clone https://github.com/${GITHUB_REPOSITORY}.git .
          git checkout ${GITHUB_SHA}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with Maturin
        run: |
          yum update -y
          yum install -y openssl openssl-devel perl-IPC-Cmd perl-core
          rustup default stable
          maturin build --release --features py --out dist

      - name: Create Release
        run: |
          RELEASE_RESPONSE=$(curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases \
            -d "{\"tag_name\":\"${GITHUB_SHA}\",\"name\":\"Build ${GITHUB_SHA}\",\"draft\":false,\"prerelease\":false}")
          echo "RELEASE_ID=$(echo $RELEASE_RESPONSE | jq -r .id)" >> $GITHUB_ENV


      - name: Upload artifacts
        run: |
          cd dist
          for file in *; do
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Content-Type: $(file -b --mime-type $file)" \
              --data-binary @"$file" \
              "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${GITHUB_RUN_ID}/${RUNNER_ARCH}/assets?name=$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
